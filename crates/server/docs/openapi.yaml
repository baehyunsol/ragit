openapi: "3.0.4"
info:
  title: ragit-server
  description: backend for ragithub
  version: 0.1.0
paths:
  /{user}/{repo}/index/:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetIndex
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
      responses:
        '200':
          description: content of `index.json` file of the repository.
          content:
            application/json:
              schema:
                type: object
  /{user}/{repo}/config/{config}:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetConfig
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
        - name: config
          in: path
          required: true
          description: name of the config file (api, build or query)
          schema:
            type: string
      responses:
        '200':
          description: content of the config file.
          content:
            application/json:
              schema:
                type: object
  /{user}/{repo}/prompt/{prompt}:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetPrompt
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
        - name: prompt
          in: path
          required: true
          description: name of the prompt file (a file in `.ragit/prompts`, without an extension)
          schema:
            type: string
      responses:
        '200':
          description: content of the prompt file.
          content:
            text/plain:
              schema:
                type: string
  /{user}/{repo}/chunk-count:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetChunkCount
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
      responses:
        '200':
          description: number of chunks in the repository
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /{user}/{repo}/chunk-list/{chunk-prefix}:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetChunkList
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
        - name: chunk-prefix
          in: path
          required: true
          description: first 2 characters of the uid of the chunk
          schema:
            type: string
      responses:
        '200':
          description: a list of chunk uids that start with the prefix
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /{user}/{repo}/chunk-list/:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetChunkListAll
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
      responses:
        '200':
          description: a full list of chunk uids of the knowledge-base
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /{user}/{repo}/chunk/{chunk-uid}:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetChunk
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
        - name: chunk-uid
          in: path
          required: true
          description: uid of the chunk
          schema:
            type: string
      responses:
        '200':
          description: the chunk
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChunkDetail'
  /{user}/{repo}/image-list/{image-prefix}:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetImageList
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
        - name: image-prefix
          in: path
          required: true
          description: first 2 characters of the uid of the image
          schema:
            type: string
      responses:
        '200':
          description: a list of image uids that start with the prefix
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /{user}/{repo}/image/{image-uid}:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetImage
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
        - name: image-uid
          in: path
          required: true
          description: uid of the image
          schema:
            type: string
      responses:
        '200':
          description: the image
          content:
            image/png:
              schema:
                type: string
                format: binary
  /{user}/{repo}/image-desc/{image-uid}:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetImageDescription
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
        - name: image-uid
          in: path
          required: true
          description: uid of the image
          schema:
            type: string
      responses:
        '200':
          description: description of the image
          content:
            application/json:
              schema:
                type: object
                properties:
                  extracted_text:
                    type: string
                  explanation:
                    type: string
  /{user}/{repo}/file-list:
    get: todo (WIP)
  /{user}/{repo}/cat-file/{uid}:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetCatFile
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
        - name: uid
          in: path
          required: true
          description: uid of a file or a chunk
          schema:
            type: string
      responses:
        '200':
          description: It's exactly same as running `rag cat-file` with the uid.
          content:
            text/plain:
              schema:
                type: string
  /{user}/{repo}/archive-list:
    get: todo
  /{user}/{repo}/archive/{archive-id}:
    get: todo
  /{user}/{repo}/meta:
    get: todo
  /{user}/{repo}/version:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetRepoVersion
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
      responses:
        '200':
          description: version of the repository
          content:
            text/plain:
              schema:
                type: string
                example: "0.4.0-dev"
  /{user}/{repo}/build-search-index:
    post: todo
  /{user}/{repo}/search:
    get:
      tags:
        - todo
      summary: todo
      description: search for chunks in this repository. There's no `sort-by` or `sort-ord` option. If you provide `query` parameter, it sorts the result by tfidf-score. Otherwise, it uses `chunk.sortable_string()` methods which usually sorts the chunks by file name.
      operationId: searchChunk
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
        - name: file
          in: query
          description: search for chunks that belong to this file or directory
          schema:
            type: string
        - name: uid
          in: query
          description: search for chunks whose uid starts or equal to this parameter
          schema:
            type: string
        - name: query
          in: query
          description: full-text search on chunks.
          schema:
            type: string
        - name: limit
          in: query
          description: todo
          required: false
          schema:
            type: integer
            format: int32
            default: 50
        - name: offset
          in: query
          description: todo
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChunkDetail'
  /{user}/{repo}/begin-push:
    post: todo
  /{user}/{repo}/archive:
    post: todo
  /{user}/{repo}/finalize-push:
    post: todo
  /{user}/{repo}/traffic:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetTraffic
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    push:
                      type: integer
                      format: int64
                    clone:
                      type: integer
                      format: int64
  /{user}/{repo}/chat/{chat-id}:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: getChat
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: repository name
          schema:
            type: string
        - name: chat-id
          in: path
          required: true
          description: chat-id
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: a chat with history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatWithHistory'
    post: todo
  /{user}/{repo}/chat-list:
    get: todo
    post: todo
  /health:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetHealth
      responses:
        '200':
          description: todo
  /version:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetServerVersion
      responses:
        '200':
          description: version of the server
          content:
            text/plain:
              schema:
                type: string
                example: "0.4.0-dev"
  /user-list:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetUserList
      parameters:
        - name: limit
          in: query
          description: todo
          required: false
          schema:
            type: integer
            format: int32
            default: 50
        - name: offset
          in: query
          description: todo
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSimple'
    post:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: CreateUser
      requestBody:
        description: todo
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: The response has no body.
  /user-list/{user}:
    get: todo
  /user-list/{user}/ai-model-list:
    get: todo

    # PUT only updates a model, and POST creates a new model (POST is WIP)
    put: todo
  /user-list/{user}/api-key-list:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetApiKeyList
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
    post:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: CreateApiKey
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
      requestBody:
        description: todo
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyCreation'
      responses:
        '200':
          description: todo
          content:
            text/plain:
              schema:
                type: string
                description: created api key
  /repo-list/{user}:
    get:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: GetRepoList
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: limit
          in: query
          description: todo
          required: false
          schema:
            type: integer
            format: int32
            default: 50
        - name: offset
          in: query
          description: todo
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepoSimple'
    post:
      tags:
        - todo
      summary: todo
      description: todo
      operationId: CreateRepo
      parameters:
        - name: user
          in: path
          required: true
          description: user id
          schema:
            type: string
      requestBody:
        description: todo
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepoCreate'
      responses:
        '200':
          description: todo
          content:
            application/json:
              schema:
                type: integer
                format: int32
                description: repo id
  /repo-list/{user}/{repo}:
    get: todo
    put: todo
components:
  schemas:
    UserSimple:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        last_login_at:
          type: string
          format: date-time
    UserCreate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        password:
          type: string
        readme:
          type: string
          nullable: true
        public:
          type: boolean
    RepoSimple:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        owner:
          type: string
        description:
          type: string
          nullable: true
        website:
          type: string
          nullable: true
        stars:
          type: integer
          format: int32
        repo_size:
          type: integer
          format: int64
          description: sum of the sizes of its archives, in bytes
        created_at:
          type: string
          format: date-time
        pushed_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
    RepoCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        website:
          type: string
          nullable: true
        readme:
          type: string
          nullable: true
        public_read:
          type: boolean
        public_write:
          type: boolean
        public_clone:
          type: boolean
        public_push:
          type: boolean
        public_chat:
          type: boolean
    ChunkDetail:
      type: object
      properties:
        uid:
          type: string
          description: todo
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChunkData'
        image_uids:
          type: array
          items:
            type: string
            description: uids of images
        title:
          type: string
        summary:
          type: string
        file:
          type: string
          description: File path that the chunk belongs to. It's null if the chunk is not from a file.
          nullable: true
        file_index:
          type: integer
          description: It's null if and only if `file` is null. It's the index of the chunk in the file.
          nullable: true
        timestamp:
          type: integer
        model:
          type: string
          description: AI model that created the chunk.
        ragit_version:
          type: string
          example: "0.4.0-dev"
    ChunkData:
      type: object
      # TODO
    ChatWithHistory:
      type: object
      properties:
        id:
          type: integer
          format: int32
        repo_id:
          type: integer
          format: int32
        title:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        history:
          type: array
          items:
            $ref: '#/components/schemas/ChatHistory'
    ChatHistory:
      type: object
      properties:
        query:
          type: string
        response:
          type: string
        user:
          type: string
        model:
          type: string
        chunk_uids:
          type: array
          items:
            type: string
        multi_turn_schema:
          type: object
          description: Ragit re-writes queries when there are multiple turns. It's the actual query that's used for RAG.
          nullable: true
          properties:
            is_query:
              type: boolean
            in_context:
              type: boolean
            query:
              type: string
        created_at:
          type: string
          format: date-time
    ApiKey:
      type: object
      properties:
        api_key_preview:
          type: string
          description: first 9 characters of the api key
        name:
          type: string
        expire:
          type: string
          format: date-time
